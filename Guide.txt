2. Project Setup
-------------------

2. Part 1
----------

1- \ParksModels\Models\NationalPark.cs

*************************************

2. Part 2
----------

1- \ParksAPI\appsettings.json

2- Install Microsoft.EntityFrameworkCore.SqlServer Nuget Package
   Install Microsoft.EntityFrameworkCore.Tools Nuget Package

3- Add Reference to "ParksModels project" in "ParksAPI project", by select Add Project Reference in Dependencies in ParksAPI project.
4- \ParksAPI\Models\AppDbContext.cs
5- \ParksAPI\Startup.cs\ConfigureServices()\AddDbContextPool()

*************************************

2. Part 3
----------

1- \ParksAPI\Migrations\20200913013708_AddParksDB.cs
2- \ParksAPI\Migrations\AppDbContextModelSnapshot.cs



/////////////////////////////////////////////////////////////////////////////////////////////////////


3. Repository
--------------

3. Part 1
----------

1- \ParksAPI\Models\Repository\IRepository\INationalParkRepository.cs
2- \ParksAPI\Models\Repository\NationalParkRepository.cs

*************************************

3. Part 2
----------

1- \ParksAPI\Models\Repository\NationalParkRepository.cs
2- \ParksAPI\Startup.cs\ConfigureServices()\AddScoped()

*************************************

3. Part 4
----------

1- \ParksAPI\Models\Dtos\NationalParkDto.cs

*************************************

3. Part 5
----------

1- Install AutoMapper Nuget Package
   Install AutoMapper.Extensions.Microsoft.DependencyInjection Nuget Package

2- \ParksAPI\Models\Mapper\ParksMapping.cs
3- \ParksAPI\Startup.cs\ConfigureServices()\AddAutoMapper()

/////////////////////////////////////////////////////////////////////////////////////////////////////

4. National Park API
--------------------

4. Part 1
-----------

1- \ParksAPI\Controllers\NationalParksController.cs
2- Add some records in NationalPark table in the database.

*************************************

4. Part 2
-----------

1- \ParksAPI\Controllers\NationalParksController.cs\GetNationalParks();

*************************************

4. Part 3
-----------

1- \ParksAPI\Controllers\NationalParksController.cs\GetNationalPark();

*************************************

4. Part 4
-----------

1- \ParksAPI\Controllers\NationalParksController.cs\CreateNationalPark()

*************************************

4. Part 6
-----------

1- \ParksAPI\Controllers\NationalParksController.cs\CreateNationalPark()

*************************************

4. Part 7
-----------

1- \ParksAPI\Controllers\NationalParksController.cs\UpdateNationalPark()

*************************************

4. Part 8
-----------

1- \ParksAPI\Controllers\NationalParksController.cs\DeleteNationalPark()


/////////////////////////////////////////////////////////////////////////////////////////////////////


5. API Documentation
--------------------

5. Part 1
-----------

1- Install Swashbuckle.AspNetCore Nuget Package.

*************************************

5. Part 2
----------

1- \ParksAPI\Startup.cs\ConfigureServices()\ AddSwaggerGen(), Configure()\ UseSwagger()

*************************************

5. Part 4
----------

1- \ParksAPI\Startup.cs\Configure()\ UseSwaggerUI()
2- \ParksAPI\Properties\launchSettings.json

*************************************

5. Part 5
----------

1- \ParksAPI\Controllers\NationalParksController.cs
2- Enable XML Documentation file in the build tab of ParksAPI Properties window, and sets it value to "ParksAPI.xml".
   \ParksAPI\ParksAPI.xml
3- \ParksAPI\Startup.cs\ConfigureServices()\ IncludeXmlComments()

*************************************

5. Part 6
----------

1- add "1591" warning type in the suppress warnings in the build tab of ParksAPI Properties window.

*************************************

5. Part 7
----------

1- \ParksAPI\Startup.cs\ConfigureServices()\ SwaggerDoc()

*************************************

5. Part 8
----------

1- \ParksAPI\Controllers\NationalParksController.cs

/////////////////////////////////////////////////////////////////////////////////////////////////////


6. Trails
-----------

6. Part 1
-----------

1- \ParksModels\Models\Trail.cs
2- \ParksModels\Enums\DifficultyType.cs
3- \ParksAPI\Models\Dtos\TrailDto.cs

*************************************

6. Part 2
----------

1- \ParksAPI\Models\Repository\IRepository\ITrailRepository.cs
2- \ParksAPI\Models\Repository\TrailRepository.cs
3- \ParksAPI\Models\AppDbContext.cs

*************************************

6. Part 3
----------

1- \ParksAPI\Startup.cs\ConfigureServices()\ AddScoped()
2- \ParksAPI\Models\Mapper\ParksMapping.cs
3- \ParksAPI\Controllers\TrailsController.cs

*************************************

6. Part 4
----------

1- \ParksAPI\Models\Dtos\TrailCreateDto.cs
2- \ParksAPI\Models\Mapper\ParksMapping.cs
3- \ParksAPI\Controllers\TrailsController.cs\ CreateTrail()

*************************************

6. Part 5
----------

1- \ParksAPI\Models\Dtos\TrailUpdateDto.cs
2- \ParksAPI\Models\Mapper\ParksMapping.cs
3- \ParksAPI\Controllers\TrailsController.cs\ UpdateTrail()
4- \ParksAPI\Migrations\20200915162315_addTrailsToDb.cs

*************************************

/////////////////////////////////////////////////////////////////////////////////////////////////////


7. Versioning in API
--------------------

7. Part 1
-----------

1- \ParksAPI\Startup.cs\ConfigureServices()\ SwaggerDoc(), Configure()\ SwaggerEndpoint()
2- \ParksAPI\Controllers\TrailsController.cs, NationalParksController.cs

*************************************

7. Part 2
-----------

1- In order to add version control, we have to remove multiple OAS that we create in the previous video, so we comment the changes that we made in the previous video.

2- Add another version of NationalController
   \ParksAPI\Controllers\NationalParksV2Controller.cs

3- Install Microsoft.AspNetCore.Mvc.Versioning Nuget Package (to support versioning)
   Install Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer Nuget Package (is used to configure Api Versioning in swagger configuration, we depend on IApiVersionDescriptionProvider interface to do that)

Both of these packages will be needed to add versioning as well as to read the current version from the controller.

4- \ParksAPI\Startup.cs\ConfigureServices()\ AddApiVersioning()

*************************************

7. Part 3
----------

1- Add swagger configuration in a seprate file, since our application will grow and the swagger configuration will be bigger.
   And in that file, we will configure swagger to add documents based on the Api Versioning (so if we have 2 version, then we will have 2 documents or OAS).
   \ParksAPI\ConfigureSwaggerOptions.cs

2- \ParksAPI\Startup.cs\Configure(), Here it adds apiVersionDescriptionProvider as a parameter in the Configure(), he will then use it in that method.
   I don't know why he pass it as a parameter, isn't we able to define it in the constructor of the straup class (dependency injection), and then use it in configure() (I didn't try that way).
   This is my wonder, at the end i follow his way, and pass apiVersionDescriptionProvider as a parameter in Configure ().

3- \ParksAPI\Startup.cs\ConfigureServices() \ AddVersionedApiExplorer(), AddTransient(), AddSwaggerGen()

*************************************

7. Part 4
----------

1- \ParksAPI\Startup.cs\Configure()\ UseSwaggerUI()

2- Edit the routes in the Controllers
   1- \ParksAPI\Controllers\NationalParksController.cs
   2- \ParksAPI\Controllers\NationalParksV2Controller.cs
   3- \ParksAPI\Controllers\TrailsController.cs
   4- \ParksAPI\Controllers\WeatherForecastController.cs

*************************************

7. Part 5
----------

1- \ParksAPI\Controllers\NationalParksController.cs\ CreateNationalPark()

*************************************

7. Part 6
----------

1- \ParksAPI\Controllers\TrailsController.cs\ GetTrailsInNationalPark()

*************************************

7. Part 7
----------

1- add image property in NationalPark model, (i do that in the first of the turorial, when i created that model)

/////////////////////////////////////////////////////////////////////////////////////////////////////


8. Parky Web
------------

8. Part 1
-----------

1- Create ParksWeb Project.
2- When we run our Web project, we want to the two project ParksAPI & ParksWeb to run
   Select properties of the "Parks Solution", in Startup Project tab select "Multiple strartup projects" 
   select "ParksAPI" Action to Start, also "ParksWeb" Action to Start.

*************************************

8. Part 2
----------

1- set the constant paths of our Web API Project in our Web Project, in the tutorial he set them in static class, but i will put them in appsettings.json file.
   (since after publishing the app, we can modify the constants if we want in appsetting.json file)
   \ParksWeb\appsettings.json

*************************************

8. Part 3
----------

1- \ParksWeb\Startup.cs\ConfigureServices()\ AddHttpClient()
2- Install Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation Nuget Package
3- \ParksWeb\Properties\launchSettings.json
4- see note 3

*************************************

8. Part 4
----------

1- \ParksWeb\Repository\IRepository\IRepository.cs

*************************************

8. Part 5
----------

1- \ParksWeb\Repository\Repository.cs
2- \ParksWeb\Repository\Repository.cs\ CreateAsync()
3- Install Newtonsoft.Json Nuget Package

*************************************

8. Part 6
----------

1- \ParksWeb\Repository\Repository.cs\ DeleteAsync(), UpdateAsync(), GetAsync(), GetAllAsync()

*************************************

8. Part 7
----------

1- In that part we recreate NationalParkDTO.cs, TrailDto.cs Models (or DataTransferObject Models or ViewModels) (that exists in ParksAPI project) in our ParksAPI project.
   But i found that this approach is not right, since we will duplicate the DTO Models in both ParksAPI and ParksWeb projects.
   And if we want to modify on one of these DTOs. then we have to do that in both ParksAPI and ParksWeb projects.

   So that, i prefered to move the DTOs in the ParksModel project, so they wil be available for both ParksAPI and ParksWeb projects.
   so, Currently in that Application, we will keep ParksAPI project use it's DTOs (defined in it's project), but for ParksWeb project, we will make it use the DTOs from the ParksModel project.

   But when we create a new application, then we should make The API and the Web Projects use the DTOs from third project which is ProjectModels (class library project).

   /ParksModel/Dtos/...

*************************************

8. Part 8
---------

1- \ParksWeb\Repository\IRepository\INationalParkRepository.cs
2- \ParksWeb\Repository\IRepository\ITrailRepository.cs
3- \ParksWeb\Repository\NationalParkRepository.cs
4- \ParksWeb\Repository\TrailRepository.cs
5- \ParksWeb\Startup.cs\ AddScoped()

*************************************

8. Part 9
---------

Add third-party plugins or packages.
1- Click Manage Client-Side Libraries on the context menu of ParksWeb Project, that generates
   \ParksWeb\libman.json

   see note 9, to see the installed packages

2- \ParksWeb\Views\Shared\_Layout.cshtml

/////////////////////////////////////////////////////////////////////////////////////////////////////

//- My Modifications -//

1- Delete Values, Weather Controllers.
2- Delete DTOs in the ParksAPI project, and make it use DTOs in ParksModel project
3- Create NationalParkCreateDto.cs, NationalParkUpdateDto.cs in ParksModels/Dtos
4- \ParksAPI\Models\Mapper\ParksMapping.cs

5- Delete the generic IRepository interface and Repository class, because we have different DTO that we will use for each method
   in that repository, so the idea of the generic type repository will not be convenient.

6- \ParksWeb\Repository\IRepository\INationalParkRepository.cs, ITrailRepository.cs
7- \ParksWeb\Repository\NationalParkRepository.cs, TrailRepository.cs


/////////////////////////////////////////////////////////////////////////////////////////////////////


9. National Park Web
------------

9. Part 1
-----------

1- \ParksWeb\Controllers\NationalParksController.cs, Index()
2- \ParksWeb\Views\Shared\_Layout.cshtml
3- \ParksWeb\Views\NationalParks\Index.cshtml

*************************************

9. Part 2
-----------

// In the tutorial he make Index action method return empty object. And make other async method that return the nationalParks object.
// And that new method will be called by jQuery from the view when configure dataTables plugin. so he make that thing because he want to call the data from the datatable plugin.
// As there is no reason for me to this, i worked in the normal way.

1- \ParksWeb\Views\NationalParks\Index.cshtml

*************************************

9. Part 4
-----------

Here he merged the Insert & Update in one method Upsert, but i will seprate them.

1- \ParksWeb\Controllers\NationalParksController.cs\ Create() {HttpGet}, Update() {HttpGet}

*************************************

9. Part 5
-----------

1- \ParksWeb\Views\NationalParks\Create.cshtml, Edit.cshtml

*************************************

9. Part 6
-----------

1- \ParksWeb\Views\NationalParks\Create.cshtml, Edit.cshtml

*************************************

9. Part 7
-----------

1- \ParksWeb\Views\NationalParks\Create.cshtml, Edit.cshtml

*************************************

9. Part 8
-----------

1- 1- \ParksWeb\Controllers\NationalParksController.cs\ Create() {HttpPost}, Update() {HttpPost}

*************************************

9. Part 9
-----------

1- \ParksWeb\Controllers\NationalParksController.cs\ Delete()
2- \ParksWeb\Views\NationalParks\Index.cshtml


/////////////////////////////////////////////////////////////////////////////////////////////////////


10. Trail Web
---------------

10. Part 2
-----------

1- \ParksWeb\Controllers\TrailsController.cs

*************************************

10. Part 3
-----------

1- \ParksWeb\Views\Trails\Index.cshtml

*************************************

10. Part 5
-----------

1- \ParksWeb\Views\Trails\Create.cshtml, Update.cshtml

*************************************

10. Part 7
-----------

1- \ParksWeb\Controllers\TrailsController.cs\ Delete() {HttpGet, HttpPost}
2- \ParksWeb\Views\Trails\Delete.cshtml

/////////////////////////////////////////////////////////////////////////////////////////////////////


11. Home Page
---------------

11. Part 1
-----------

1- Modify the template of the project

***************************************

11. Part 2
-----------

1- \ParksWeb\ViewModels\IndexVM.cs
2- \ParksWeb\Controllers\HomeController.cs\ Index()

***************************************

11. Part 3
-----------

1- \ParksWeb\Views\Home\Index.cshtml

/////////////////////////////////////////////////////////////////////////////////////////////////////


12. Authenticating API
----------------------

12. Part 2
-----------

1- \ParksAPI\Controllers\NationalParksController.cs\ GetNationalPark()

***************************************

12. Part 3
-----------

1- \ParksModels\Models\User.cs
2- \ParksAPI\Models\AppDbContext.cs
3- \ParksAPI\Migrations\20200920172826_UsersToDb.cs

***************************************

12. Part 4
-----------

1- \ParksAPI\Models\Repository\IRepository\IUserRepository.cs
2- \ParksAPI\Models\Repository\UserRepository.cs
3- \ParksV2\ParksAPI\Startup.cs\ AddScoped()

***************************************

12. Part 5
----------

1- When we use tokens, we will need a secret key to generate these tokens.
   \ParksAPI\appsettings.json

2- We will Create AppSettings.cs to access the secret key from that class.
   (that step is not required since we can get the secret key from appsettings.json file using IConfiguration service directly, 
    but we did that step because it learn us how to bind a class properties to the properties of a section in appsettings.json file)

    \ParksAPI\AppSettings.cs

3- Use Startup to bind AppSettings.cs to AppSettings section in appsettings.json file.

   \ParksAPI\Startup.cs\ConfigureServices()\ Configure<>()
   

***************************************

12. Part 6
----------

Set JWT bearer token configuration.

1- Install Microsoft.AspNetCore.Authentication.JwtBearer Nuget Package
2- \ParksAPI\Startup.cs\ConfigureServices()\ AddAuthentication(), AddJwtBearer(), AddCors()
3- \ParksAPI\Startup.cs\Configure()\ UseAuthentication(), UseCors()

***************************************

12. Part 7
-----------

1- \ParksAPI\Models\Repository\UserRepository.cs\ Authenticate()

***************************************

12. Part 8
-----------

1- \ParksAPI\Controllers\AccountController.cs, Authenticate()
2- \ParksModels\Dtos\LoginDto.cs

***************************************

12. Part 9
-----------

1- \ParksModels\Dtos\UserDto.cs
2- \ParksAPI\Models\Mapper\ParksMapping.cs
3- \ParksAPI\Models\Repository\UserRepository.cs\ Authenticate()
4- \ParksAPI\Models\Repository\IRepository\IUserRepository.cs
5- \ParksAPI\Controllers\AccountController.cs\ Authenticate()

***************************************

12. Part 10
-----------

Add JWT token Support for swagger.

1- \ParksAPI\ConfigureSwaggerOptions.cs

***************************************

12. Part 12
-----------

1- \ParksAPI\Models\Repository\UserRepository.cs\ IsUserUnique(), Register()
2- \ParksModels\Dtos\RegisterDto.cs
3- \ParksAPI\Models\Mapper\ParksMapping.cs
4- \ParksAPI\Controllers\AccountController.cs\ Register()

***************************************

12. Part 13
-----------

1- \ParksAPI\Controllers\TrailsController.cs\ GetTrail()
2- \ParksAPI\Models\Repository\UserRepository.cs\ Authenticate()


/////////////////////////////////////////////////////////////////////////////////////////////////////

13. Consuming & Implementing Authentication in Parky Web
----------------------

13. Part 1
-----------

1- \ParksWeb\Repository\IRepository\IAccountRepository.cs
2- \ParksWeb\Repository\AccountRepository.cs
3- \ParksWeb\Startup.cs\ AddScoped ()

***************************************

13. Part 2
-----------

1- \ParksWeb\Repository\AccountRepository.cs\ LoginAsync(), RegisterAsync()

***************************************

13. Part 3
-----------

1- when the user login, we will save the user JWT token in a session, so we add configuration of sessions.
   \ParksWeb\Startup.cs

2- \ParksWeb\Controllers\AccountController.cs\ Login() {HttpGet, HttpPost}
3- \ParksV2\ParksWeb\appsettings.json

***************************************

13. Part 4
-----------

1- \ParksWeb\Controllers\AccountController.cs\ Register() {HttpGet, HttpPost}, Logout()

***************************************

13. Part 5
-----------

1- \ParksWeb\Views\Account\Login.cshtml, Register.cshtml
2- \ParksWeb\Views\Shared\_Layout.cshtml
3- \ParksWeb\Startup.cs\ AddSingleton()

***************************************

13. Part 6
-----------

- HttpContext property that we use to access Session is available only in the Controller, so that we can't use it in the repository class.

1- \ParksWeb\Repository\IRepository\IAccountRepository.cs, INationalParkRepository.cs, ITrailRepository.cs
2- \ParksWeb\Repository\AccountRepository.cs, NationalParkRepository.cs, TrailRepository.cs
3- \ParksWeb\Controllers\AccountController.cs

***************************************

13. Part 7
-----------
Configure Cookie authentication
1- \ParksWeb\Startup.cs\ConfigureServices()\ AddAuthentication(), AddCookie(), AddHttpContextAccessor()
2- \ParksWeb\Startup.cs\Configure()\ UseAuthentication()

***************************************

13. Part 8
-----------

1- \ParksWeb\Controllers\HomeController.cs\AccessDenied()
2- \ParksWeb\Views\Home\AccessDenied.cshtml
3- \ParksWeb\Controllers\AccountController.cs\ Login() {HttpPost}, LogOut()

***************************************

13. Part 9
-----------

1- \ParksWeb\Controllers\TrailsController.cs\ Edit() {HttpGet}
2- \ParksWeb\Views\Shared\_Layout.cshtml

***************************************

13. Part 10
-----------

1 \ParksWeb\Controllers\AccountController.cs\ Login(), Register() {HttpPost}
2- \ParksWeb\Views\Shared\_Layout.cshtml